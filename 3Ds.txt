torch.nn.Conv3d(in_channels, out_channels, kernel_size, stride = 1, padding = 0, dilation = 1, groups = 1, 
bias = True, padding_mode = 'zeros', device = None, dtype = None)

> in_channels(int): Number of channels in the input img
> out_channels(int): Number of channels produced by the convolution
> padding_mode: 'zeros', 'reflect', 'replicate', 'circular', Default:'zeros'
> applies a 3D convolution over an input signal composed of several input planes
> supports TensorFloat32
> dilation controls the spacing between the kernel points; also known as the a trous algorithm. Default = 1
> bias(bool, optional): If True, adds a learnable bias to the output. Default: True
> groups controls the connections between inputs and outputs. in_channels and out_channels must both be divisible
by groups. For example,
    At groups = 1, all inputs are convolved to all outputs.
    At groups = 2, the operation becomes equivalent to having two conv layers side by side, each seeing half the input
    channels and producing half the output channels, and both subsequently concatenated.

<<shape>>
input: (N, Cin, Din, Hin, Win)
output: (N, Cout, Dout, Hout, Wout)

D, H, W(out) = [(D, H, w(in) + 2*padding - dilation*(kernel_size - 1) - 1)/stride] + 1



==================================================================================================

torch.nn.BatchNorm3d(num_features, eps = 1e-05, momentum = 0.1, affine = True, track_running_stats = True, device = None, dtype = None)

>> appies batch normalization over a 5D input(a mini-batch of 3D inputs with additional channel dimension).
   The mean and standard-deviation are calculated per-dimension over the mini-batches and gamma and beta are learnable parameter vectors of size C.
   (y = {x-E(x)}/root(Var[x] + epsilon) * gamma + beta)
   


===========================================

func(*iterable) : iterable 객체를 전달하면서 *을 붙여서 함수 호출할 때
func(**dict) : dict 객체를 전닳하면서 **을 붙여서 함수 호출할 때
def func(*args): 함수를 정의하면서 매개변수 args에 * 을 붙일 때
def func(**args): 함수를 정의하면서 매개변수 args에 ** 을 붙일 때; 전달되는 내용이 딕셔너리로 묶여서 args에 전달된다.
example>
  d = dict(a=1, b=2, c=3)
  who = (*d)
  > a, b, c
  who = (**d)
  > 1, 2, 3

=============================================
isinstance():

> example:
    isinstance(4, int) --> is 4 is an 'int'? ==> 'True'


